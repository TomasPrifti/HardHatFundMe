{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport \"./PriceConverter.sol\";\n\nerror FundMe__NotOwner();\n\n/**\n * @title A contract for Crowd Funding\n * @author Tomas\n * @notice This contract is to demo a sample funding contract\n * @dev This implements PriceFeed as our library\n */\ncontract FundMe {\n    using PriceConverter for uint256;\n\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\n    address private immutable i_owner;\n\n    // The \"s_\" is related to Storage memory.\n    AggregatorV3Interface private s_priceFeed;\n    mapping(address => uint256) private s_addressToAmountFunded;\n    address[] private s_funders;\n\n    modifier onlyOwner {\n        //require(msg.sender == i_owner, \"You are not the owner\");\n        //require(msg.sender == i_owner, FundMe__NotOwner());\n        if (msg.sender != i_owner) {\n            revert FundMe__NotOwner();\n        }\n        _; // execute the other code after.\n    }\n\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender;\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n\n    /**\n     * @notice This function funds this contract\n     */\n    function fund() public payable {\n        //require(getConversionRate(msg.value) >= MINIMUM_USD, \"Didn't send enough ether !\");\n        require(msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD, \"Didn't send enough ether !\");\n        s_funders.push(msg.sender); // Saving the funder's address.\n        s_addressToAmountFunded[msg.sender] += msg.value; // Saving the funder's amount to his address.\n    }\n\n    function withdraw() public onlyOwner {\n        for (uint256 index = 0; index < s_funders.length; index++) {\n            s_addressToAmountFunded[s_funders[index]] = 0;\n        }\n        s_funders = new address[](0); // Reset the s_funders array.\n        \n        // using payable address.\n    \n        // transfer -> throws error if it's used too much gas -> automatically reverts the transaction.\n        //payable(msg.sender).transfer(address(this).balance);\n        \n        // send\n        //bool sendSuccess = payable(msg.sender).send(address(this).balance);\n        //require(sendSuccess, \"Send failed\"); // if it fails, we revert the transactions with require.\n\n        // call -> lower layer command -> recommended way to transfer tokens.\n        // (bool callSuccess, bytes memory dataReturned) = payable(msg.sender).call{value: address(this).balance}(\"\");\n        (bool callSuccess,) = payable(msg.sender).call{value: address(this).balance}(\"\");\n        require(callSuccess, \"Call failed\"); // if it fails, we revert the transactions with require.\n    }\n\n    function cheaperWithdraw() public onlyOwner {\n        address[] memory funders = s_funders; // We read only one time \"s_funders\".\n        for (uint256 index = 0; index < funders.length; index++) {\n            s_addressToAmountFunded[funders[index]] = 0;\n        }\n\n        s_funders = new address[](0); // Reset the s_funders array.\n        \n        (bool callSuccess,) = payable(msg.sender).call{value: address(this).balance}(\"\");\n        require(callSuccess, \"Call failed\"); // if it fails, we revert the transactions with require.\n    }\n\n    /* Getters */\n\n    function getOwner() public view returns(address) {\n        return i_owner;\n    }\n\n    function getFunder(uint256 index) public view returns(address) {\n        return s_funders[index];\n    }\n    \n    function getAddressToAmountFunded(address funder) public view returns(uint256) {\n        return s_addressToAmountFunded[funder];\n    }\n    \n    function getPriceFeed() public view returns(AggregatorV3Interface) {\n        return s_priceFeed;\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.8;\r\n\r\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary PriceConverter {\r\n\r\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns(uint256) {\r\n        // Sepolia Testnet: https://docs.chain.link/data-feeds/price-feeds/addresses?network=ethereum&page=1#sepolia-testnet\r\n        // ETH/USD Address: 0x694AA1769357215DE4FAC081bf1f309aDC325306\r\n        //(uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound) = priceFeed.latestRoundData();\r\n        (,int256 answer,,,) = priceFeed.latestRoundData();\r\n        // ETH in terms of USD\r\n        // 3000.00000000\r\n        return uint256(answer * 1e10);\r\n    }\r\n\r\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed) internal view returns(uint256) {\r\n        uint256 ethPrice = getPrice(priceFeed);\r\n        uint256 ethAmountInUSD = (ethPrice * ethAmount) / 1e18;\r\n        return  ethAmountInUSD;\r\n    }\r\n\r\n    function getVersion() internal view returns(uint256) {\r\n        // Sepolia Testnet: https://docs.chain.link/data-feeds/price-feeds/addresses?network=ethereum&page=1#sepolia-testnet\r\n        // ETH/USD Address: 0x694AA1769357215DE4FAC081bf1f309aDC325306\r\n        return AggregatorV3Interface(0x694AA1769357215DE4FAC081bf1f309aDC325306).version();\r\n    }\r\n\r\n    function getDecimals() internal view returns(uint8) {\r\n        // Sepolia Testnet: https://docs.chain.link/data-feeds/price-feeds/addresses?network=ethereum&page=1#sepolia-testnet\r\n        // ETH/USD Address: 0x694AA1769357215DE4FAC081bf1f309aDC325306\r\n        return AggregatorV3Interface(0x694AA1769357215DE4FAC081bf1f309aDC325306).decimals();\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}